import{_ as l,c as e,a2 as a,o}from"./chunks/framework.BQmytedh.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"resume.md","filePath":"resume.md"}'),r={name:"resume.md"};function t(n,i,s,d,c,h){return o(),e("div",null,i[0]||(i[0]=[a('<h2 id="个人信息" tabindex="-1">个人信息 <a class="header-anchor" href="#个人信息" aria-label="Permalink to &quot;个人信息&quot;">​</a></h2><p><code>黄**</code> | <code>男</code> | <code>130****5985</code> | <code>2003</code></p><p><code>hunjyer@gmail.com</code> | <code>https://github.com/DaHuangQwQ </code> | <code>https://dahuangqwq.github.io/</code></p><p><code>Golang</code></p><h2 id="教育背景" tabindex="-1">教育背景 <a class="header-anchor" href="#教育背景" aria-label="Permalink to &quot;教育背景&quot;">​</a></h2><p>2022.07-2026.06 沈阳**大学 软件工程（本科）</p><p>主修专业课程：C++，Python，Java，数据结构，算法分析与设计，数据库，计算机网络</p><h2 id="技能证书" tabindex="-1">技能证书 <a class="header-anchor" href="#技能证书" aria-label="Permalink to &quot;技能证书&quot;">​</a></h2><p>国级三等奖 第十五届蓝桥杯</p><p>国级铜牌 第十八届东北地区大学生程序设计竞赛 (CCPC 区域赛)</p><p>省级二等奖 2023高教社杯全国大学生数学建模竞赛</p><p>国级三等奖 2024团队程序设计天梯赛</p><h2 id="技术栈" tabindex="-1">技术栈 <a class="header-anchor" href="#技术栈" aria-label="Permalink to &quot;技术栈&quot;">​</a></h2><ul><li>Golang：熟练掌握 GO 语言编程，掌握 GO SOLID 设计理念，掌握 GO 运行时原理，掌握 GO 性能优化，熟练运用 GO 并发编程。了解 GMP 模型调度器、gc 垃圾回收、go 内存分配、内存逃逸，熟练掌握 GO 的基本框架，如 GIN、GORM、GRPC 等，了解它们的实现原理，能进行二次开发</li><li>MySQL：熟练掌握 MySQL，掌握 InnoDB 引擎、事务隔离级别、锁，熟练掌握索引的使用。了解读写分离和分库分表架构，了解不停机数据迁移，确保数据一致性和系统稳定性</li><li>Redis：熟练掌握 Redis，掌握 Redis 高可用和高性能原理。能灵活运用 Redis 的数据结构，熟悉缓存模式，熟练解决缓存一致性、穿透、击穿和雪崩等问题，能熟练优化 Redis 性能</li><li>Kafka：熟练掌握 Kafka，掌握 Kafka 的底层原理。有 Kafka 的高并发使用经验，了解顺序消息、重复消费、消息积压、延时消息等问题的解决方案</li><li>微服务：深入理解微服务架构，了解微服务注册与发现、负载均衡和服务治理等关键技术。了解微服务监控和日志管理。了解常用的微服务框架和工具，如 GRPC，并有使用框架实施服务治理的经验</li><li>分布式系统：熟悉共识算法 Raft，了解分布式 CAP、BASE 理论以及分布式系统设计原则，了解分布式锁的实现原理，了解基本的分布式事务处理方法，如两阶段提交、事务补偿机制</li><li>熟悉 TCP/IP，UDP，HTTP/HTTPS，QUIC 等网络协议，熟悉 TCP 流量控制、拥塞控制</li><li>熟悉 IO 多路复用技术（select/poll/epoll）底层原理</li><li>Docker 和 Kubernetes：熟练使用Docker进行容器化部署，了解 K8S 的基本概念</li><li>设计和开发方法：熟悉领域驱动设计(DDD)、测试驱动开发(TDD)、和一些设计模式，如 option、builder、洋葱模式、singleflight 模式、装饰器模式等等，了解事件驱动开发</li><li>Linux 和 git：熟练使用 Linux 和 git 基本操作</li></ul><h2 id="项目经验" tabindex="-1">项目经验 <a class="header-anchor" href="#项目经验" aria-label="Permalink to &quot;项目经验&quot;">​</a></h2><h3 id="webook" tabindex="-1">webook <a class="header-anchor" href="#webook" aria-label="Permalink to &quot;webook&quot;">​</a></h3><p><strong>框架技术</strong></p><p>Gin + Gorm + GRPC + Kafka + Mysql + Canal + Redis + Prometheus + ELK + Cron + Docker + Viper</p><p><strong>项目描述</strong></p><ul><li>用户社交博客论坛，采用Gin实现用户注册，登录和发帖功能，支持阅读、点赞和收藏</li><li>使用JWT实现长短 Token 和 OAuth2 实现了注册手机号密码和微信扫码注册登录，提升安全性和用户体验</li><li>使用Kafka消息队列改造了阅读计数功能，采用批量消费，提升性能和解藕，一定程度解决了消息积压的问题</li><li>通过Redis的ZSet实现生成热榜和点赞排行榜，使用基于mysql实现的分布式任务调度系统定期调度热榜数据，确保时效性，再使用缓存预加载到本地缓存来实现高性能</li><li>微服务架构，使用gRPC进行高效通信，实现服务熔断、限流、降级，使用 etcd 实现服务注册，发现，配置中心和负载均衡机制，提升系统的可扩展性和可靠性</li><li>采用不停机数据迁移策略确保高可用性，实现了 canal 异步的方式来数据校验</li><li>实现了较高性能和高可用性打赏支付系统，实现了打赏-支付-记账三者对账机制和记账的幂等性</li><li>采用了ElasticSearch 实现高可用的搜索、标签服务</li><li>采用了推拉混合模型实现 feed 流，利用业务特征来优化写扩散和读扩散</li><li>采用了 openIM 系统，并使用 canal 监听 binlog 来同步用户信息</li><li>采用了Prometheus，Zipkin，Grafana，ELK进行监控和报警，提高系统可观测性</li></ul><h3 id="云原生数据库代理" tabindex="-1">云原生数据库代理 <a class="header-anchor" href="#云原生数据库代理" aria-label="Permalink to &quot;云原生数据库代理&quot;">​</a></h3><p><strong>项目特点</strong></p><ul><li>功能丰富：支持分库分表、读写分离。分库分表支持分布式事务、复杂查询，在读写分离中支持多种负载均衡策略，以及提供了容错功能；</li><li>多种形态：支持独立部署为数据库代理，也支持以 sidecar 形态部署，并且封装成了 Go driver 的 SDK 形态，可以在 Go 应用中直接使用；</li><li>无缝切换：实现了 MySQL 协议，伪装成了一个普通的 MySQL 数据库，所有的应用都可以无缝切换而不需要修改任何代码；</li><li>可插拔：具体的功能点都是通过插件机制接入的，用户也可以用同样插件机制接入自己自定义的功能；</li><li>全链路：支持在数据库查询中传递链路数据，进而支持全链路追踪，AB 测试等；</li></ul><p><strong>项目贡献</strong></p><ul><li>负责项目的整体架构设计和核心功能实现</li><li>设计并实现了 MySQL 协议、ANTLR4 、AST 解析、数据分片算法、分布式事务管理、读写分离、Go driver 接口实现等核心模块</li><li>负责性能问题排查和优化</li><li>编写了详细的项目文档和用户指南，帮助用户快速上手</li><li>编写了详尽的测试，覆盖率超过 85%</li></ul><h3 id="本地消息表" tabindex="-1">本地消息表 <a class="header-anchor" href="#本地消息表" aria-label="Permalink to &quot;本地消息表&quot;">​</a></h3><p><strong>内容</strong></p><p>该项目是一个统一的高性能高可用本地消息解决方案，提供了 SDK 和管理后台，用于解决公司内部普遍存在的消息可靠发送问题。它支持分库分表，支持动态调度和负载均衡，提供了管理界面，并且接入了完善的监控和告警。</p><p><strong>项目特点</strong></p><ul><li>支持分库分表业务：支持多种使用方式，不仅仅适用于单表业务，也适用于分库分表业务；</li><li>简易灵活管理后台：管理后台可以独立部署并且关联多个业务方，也可以和特定业务合并部署，前端界面可以兼容两种模式，适配不同业务方的需求；</li><li>动态调度补偿任务：支持动态调度异步补偿任务，在高负载的时候可以替换任务执行节点，以及根据业务高峰低谷自动调度补偿任务执行情况；</li><li>分布式锁：抽象了分布式锁的接口，提供了基于 Redis 和关系型数据库的两种实现，用户可以选择不同实现来控制补偿任务只能有一个执行节点；</li></ul><p><strong>项目贡献</strong></p><ul><li>核心功能研发：负责核心模块功能的设计与实现，如 SDK 接口设计、异步补偿任务、管理后台等，保证的系统按时保质保量交付。负责解决核心难点，如实现分布式锁、支持分库分表，补偿任务动态调度、重试与幂等等问题；</li><li>性能优化：通过批量发送、引入对象池等技术，提高 SDK 的性能和补偿任务的吞吐量；</li><li>可用性保障：引入抢占式分布式任务调度，实现高负载下任务重新调度机制，以及根据业务高峰低谷动态限制补偿任务吞吐量特性，提高补偿任务的可用性，并且避免影响正常业务的执行情况；</li><li>可观测性：接入了 trace 和 metrics，监控 SDK 性能，补偿任务执行情况，以及消息发送情况；</li></ul><h3 id="mit-6-824" tabindex="-1">Mit 6.824 <a class="header-anchor" href="#mit-6-824" aria-label="Permalink to &quot;Mit 6.824&quot;">​</a></h3><ul><li>使用 golang 实现了 MapReduce 分布式计算系统</li><li><strong>Raft 协议</strong>：实现基于 Log 状态机，领导人选举，心跳机制，日志复制的一致性分布式共识算法。</li><li><strong>分布式 KV Server 集群</strong>：在 Raft 基础上实现强一致性的分布式 KV Server 集群，保证集群在网络不可靠环境，服务器崩溃重启等情况下仍然能提供一致性的数据读写服务</li><li><strong>日志快速回退</strong>：节点宕机重启时会产生大量 RPC 造成网络压力，因此使用日志快速回退优化，加快集群同步速度</li><li><strong>快照压缩</strong>：日志增大造成内存开销过大，减慢节点同步速度，因此加入快照用以进行日志压缩，减少内存开销，加快节点恢复速度</li><li>通过了该项目掌握了Zookeeper、CRAQ、Aurora的基本原理。并熟悉了线程间的同步与通信机制、多线程中对锁、RPC的使用</li></ul>',34)]))}const g=l(r,[["render",t]]);export{u as __pageData,g as default};
