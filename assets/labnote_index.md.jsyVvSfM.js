import{_ as a,c as e,o as i,V as o}from"./chunks/framework.jgiY9GFO.js";const p=JSON.parse('{"title":"转 go 语言的学习之路","description":"","frontmatter":{},"headers":[],"relativePath":"labnote/index.md","filePath":"labnote/index.md"}'),l={name:"labnote/index.md"},t=o('<h1 id="转-go-语言的学习之路" tabindex="-1">转 go 语言的学习之路 <a class="header-anchor" href="#转-go-语言的学习之路" aria-label="Permalink to &quot;转 go 语言的学习之路&quot;">​</a></h1><h2 id="与其他语言比较" tabindex="-1">与其他语言比较 <a class="header-anchor" href="#与其他语言比较" aria-label="Permalink to &quot;与其他语言比较&quot;">​</a></h2><ul><li>go 语言非常类似于 c 语言</li><li>for 循环的迭代变量都是共享地址的</li><li>go 的数组功能很弱</li><li>go 的切片是共享地址的</li><li>go 有类型推断，但是没有自动类型转换</li><li>go 的范型太弱</li><li>语法简单，支持轻量级线程（goroutine）和通信（channel），通俗的讲就是尽量避免使用系统调用</li><li>函数式编程，如责任链模式和其他语言不太常见的 option 模式</li><li>错误处理，go 语言的错误处理一言难尽</li><li>go 缺乏 SPI（service provider interface）机制与动态生成新的类型的机制，导致很多特性依赖于代码生成技术，但是带来了代码易读</li><li>面试难点：内存分配 垃圾回收 GMP调度 并发编程 内置类型的实现原理</li><li>面试八古文少，go 的框架都很简单易用</li></ul><h2 id="与-java-比较" tabindex="-1">与 java 比较 <a class="header-anchor" href="#与-java-比较" aria-label="Permalink to &quot;与 java 比较&quot;">​</a></h2><ul><li>Java 使⽤⼴泛，但是 Go ⽐ Java 更适合⾼并发和轻量级的应⽤</li><li>Java 通过线程和锁来处理并发， Goroutines 和 channels 是 Go 语⾔的并发特性的核⼼</li><li>Java 是⼀⻔功能丰富、⾯向对象的语⾔，⽀持⾯向对象编程、泛型等⾼级特性。 Go 语⾔的设计注重简洁和清晰，具有简单的语法和类型系统。它摒弃了⼀些复杂的特性，强调代码的可读性。</li></ul><h2 id="我的看法" tabindex="-1">我的看法 <a class="header-anchor" href="#我的看法" aria-label="Permalink to &quot;我的看法&quot;">​</a></h2><p>对于中级工程师及以上，编程语言的差距没有那么大，设计实现上大多数都是一个套路</p>',7),r=[t];function n(c,s,d,h,_,u){return i(),e("div",null,r)}const f=a(l,[["render",n]]);export{p as __pageData,f as default};
