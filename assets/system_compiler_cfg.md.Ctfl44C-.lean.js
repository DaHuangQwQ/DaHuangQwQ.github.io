import{_ as o,c as t,a2 as a,o as r}from"./chunks/framework.BQmytedh.js";const g=JSON.parse('{"title":"Context-Free Grammar","description":"","frontmatter":{},"headers":[],"relativePath":"system/compiler/cfg.md","filePath":"system/compiler/cfg.md"}'),c={name:"system/compiler/cfg.md"};function s(n,e,d,i,l,p){return r(),t("div",null,e[0]||(e[0]=[a('<h1 id="context-free-grammar" tabindex="-1">Context-Free Grammar <a class="header-anchor" href="#context-free-grammar" aria-label="Permalink to &quot;Context-Free Grammar&quot;">​</a></h1><p>上下文无关文法（Context-Free Grammar, CFG）是一种用于描述语法规则的数学形式。它主要用于编程语言的解析和自然语言处理等领域。上下文无关文法由四个部分组成：</p><ol><li><strong>终结符（Terminals）</strong> ：文法中真正的符号，通常是构成语言字符串的基本元素。例如，在编程语言中，终结符可以是关键字、标识符等。</li><li><strong>非终结符（Non-terminals）</strong> ：用于表示语法结构的符号，通常代表某种语法类别或构造。非终结符可以在生成字符串的过程中被替换成其他符号。</li><li><strong>产生式（Productions）</strong> ：定义了如何将非终结符转换为终结符或其他非终结符的规则。每个产生式都是一个形式如 <code>A → α</code> 的规则，其中 <code>A</code> 是非终结符，<code>α</code> 是终结符或非终结符的串。</li><li><strong>起始符号（Start Symbol）</strong> ：文法中一个特殊的非终结符，用于生成语言的所有有效字符串。</li></ol><p>上下文无关文法的特点是，每个产生式的左侧只有一个非终结符，这使得它在解析时相对简单。常见的例子包括算术表达式、编程语言的语法分析等。上下文无关文法通常通过推导过程来生成字符串，如通过不断替换非终结符实现生成。</p><p>例如，一个简单的上下文无关文法可能如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>S → aSb | ε</span></span></code></pre></div><p>这个文法生成的语言是包含相等数量的 <code>a</code> 和 <code>b</code> 的字符串，例如 <code>&quot;&quot;</code>、<code>&quot;ab&quot;</code>、<code>&quot;aabb&quot;</code>、<code>&quot;aaabbb&quot;</code> 等。这里 <code>S</code> 是起始符号，<code>ε</code> 表示空字符串。</p>',7)]))}const u=o(c,[["render",s]]);export{g as __pageData,u as default};
