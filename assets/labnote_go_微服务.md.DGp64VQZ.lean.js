import{_ as s,c as a,a2 as t,o as n}from"./chunks/framework.BQmytedh.js";const E=JSON.parse('{"title":"微服务","description":"","frontmatter":{},"headers":[],"relativePath":"labnote/go/微服务.md","filePath":"labnote/go/微服务.md"}'),l={name:"labnote/go/微服务.md"};function p(e,i,h,k,r,o){return n(),a("div",null,i[0]||(i[0]=[t(`<h1 id="微服务" tabindex="-1">微服务 <a class="header-anchor" href="#微服务" aria-label="Permalink to &quot;微服务&quot;">​</a></h1><h2 id="微服务拆分" tabindex="-1">微服务拆分 <a class="header-anchor" href="#微服务拆分" aria-label="Permalink to &quot;微服务拆分&quot;">​</a></h2><h2 id="依据-ddd-来拆分微服务" tabindex="-1">依据 DDD 来拆分微服务 <a class="header-anchor" href="#依据-ddd-来拆分微服务" aria-label="Permalink to &quot;依据 DDD 来拆分微服务&quot;">​</a></h2><p>一个领域就是一个微服务</p><h3 id="步骤" tabindex="-1">步骤 <a class="header-anchor" href="#步骤" aria-label="Permalink to &quot;步骤&quot;">​</a></h3><ol><li><p>单体</p><blockquote><p>完善单元测试</p><p>先抽取公共部分，如 utils、helper 等</p><p>引入聚合层解除模块间循环依赖</p><p>按照业务对象划分模块，分到不同的包里</p></blockquote></li><li><p>模块化</p><blockquote><p>创建不同的代码仓库，将公共部分、业务模块逐个挪到别的代码仓库</p><p>开始准备微服务环境和微服务框架选型</p><p>搭建好 CI 和集成测试环境</p></blockquote></li><li><p>模块依赖化</p><blockquote><p>业务模块逐个服务化，解决微服务开发、测试、部署中所遇到的问题</p><p>搭建自动部署和回滚平台</p><p>调研服务治理和网关</p><p>引入消息队列</p><p>引入分布式事务解决方案</p><p>引入分布式任务调度</p><p>搭建可观测性平台logging、tracing、metrics以及对应的告警系统</p></blockquote></li><li><p>微服务化</p><blockquote><p>做好测试 测试覆盖率 80% 以上</p><p>引入服务治理</p><p>引入网关</p><p>引入回归测试</p><p>按照业务分库</p></blockquote></li></ol><h2 id="服务部署不停机方案" tabindex="-1">服务部署不停机方案 <a class="header-anchor" href="#服务部署不停机方案" aria-label="Permalink to &quot;服务部署不停机方案&quot;">​</a></h2><h3 id="回滚方案" tabindex="-1">回滚方案 <a class="header-anchor" href="#回滚方案" aria-label="Permalink to &quot;回滚方案&quot;">​</a></h3><p>引入一个同时使用本地调用和微服务调用的中间状态。如果微服务调用出了问题，我们就把流量立刻切换回去本地调用，否则就加大流量。</p><h3 id="线上灰度方案" tabindex="-1">线上灰度方案 <a class="header-anchor" href="#线上灰度方案" aria-label="Permalink to &quot;线上灰度方案&quot;">​</a></h3><p>随机数+阈值 或者 业务id的哈希值</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 流量调度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InteractiveClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">intrv1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InteractiveServiceClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// [0, 100) 的随机数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rand.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int31n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i.threshold.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i.remote</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i.local</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,12)]))}const c=s(l,[["render",p]]);export{E as __pageData,c as default};
