import{_ as s,c as i,o as a,V as n}from"./chunks/framework.WykxUCM3.js";const g=JSON.parse('{"title":"分布式任务调度系统","description":"","frontmatter":{},"headers":[],"relativePath":"labnote/go/分布式任务调度系统.md","filePath":"labnote/go/分布式任务调度系统.md"}'),l={name:"labnote/go/分布式任务调度系统.md"},t=n(`<h1 id="分布式任务调度系统" tabindex="-1">分布式任务调度系统 <a class="header-anchor" href="#分布式任务调度系统" aria-label="Permalink to &quot;分布式任务调度系统&quot;">​</a></h1><h2 id="分布式锁方案" tabindex="-1">分布式锁方案 <a class="header-anchor" href="#分布式锁方案" aria-label="Permalink to &quot;分布式锁方案&quot;">​</a></h2><blockquote><p>如果抢到了分布式锁，那么就执行任务，否在就不执行</p></blockquote><p>基于 redis 实现的分布式锁</p><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><p>只能控制住同一时刻只有一个 goroutine 在计算热榜，但是控制不住计算一次之后，别的机器就不要去计算热榜了</p><h3 id="如何解决缺点" tabindex="-1">如何解决缺点 <a class="header-anchor" href="#如何解决缺点" aria-label="Permalink to &quot;如何解决缺点&quot;">​</a></h3><p>当下的分布式锁的意思是，我只在计算的过程中持有这个锁，等计算完毕我就释放锁。</p><p>我们可以考虑在启动的时候拿到锁，而后不管计算几次，都不会释放锁</p><p>自己拿到了锁，那么就要开启自动续约功能</p><h2 id="基于-mysql-的分布式任务调度" tabindex="-1">基于 mysql 的分布式任务调度 <a class="header-anchor" href="#基于-mysql-的分布式任务调度" aria-label="Permalink to &quot;基于 mysql 的分布式任务调度&quot;">​</a></h2><h3 id="思路" tabindex="-1">思路 <a class="header-anchor" href="#思路" aria-label="Permalink to &quot;思路&quot;">​</a></h3><ul><li>在数据库中创建一张表，里面是等待运行的定时任务</li><li>所有的实例都试着从这个表里面“抢占”等待运行的任务，抢占到了就执行</li></ul><blockquote><p>抢占的时候我崩了怎么办？</p><p>答：引入续约机制</p><p>怎么表达一个抢占动作？</p><p>答：使用乐观锁更新状态，也就是我先找到符合条件的记录，然后我尝试更新状态为调度中，为了防止并发竞争，我用 version来保证在我读取，到我更新的时候，没有人抢占了它</p></blockquote><h3 id="表结构设计" tabindex="-1">表结构设计 <a class="header-anchor" href="#表结构设计" aria-label="Permalink to &quot;表结构设计&quot;">​</a></h3><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Job</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Id       </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`gorm:&quot;primary_key,AUTO_INCREMENT&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Cfg      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Name     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`gorm:&quot;unique&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Status   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Version  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Cron     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	NextTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`gorm:&quot;index&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	UTime    </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	CTime    </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="优化策略" tabindex="-1">优化策略 <a class="header-anchor" href="#优化策略" aria-label="Permalink to &quot;优化策略&quot;">​</a></h3><ol><li>一次取一批， 一次性取出100个，然后随机从某一条开始抢占</li><li>随机偏移量，兜底：第一次没查到，偏移量回归到 0</li><li>id取余分配， 兜底不加余数条件</li><li>乐观锁 CAS操作，compare and swap</li><li>用乐观锁 取代 for update（性能差，死锁）</li></ol><h2 id="基于-k8s-的分布式任务调度" tabindex="-1">基于 k8s 的分布式任务调度 <a class="header-anchor" href="#基于-k8s-的分布式任务调度" aria-label="Permalink to &quot;基于 k8s 的分布式任务调度&quot;">​</a></h2><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">batch/v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">CronJob</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">webook</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  jobTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          containers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">hello-world</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">              image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">flycash/cron_job:v0.0.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">              imagePullPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">IfNotPresent</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          restartPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">OnFailure</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*/5 * * * *&quot;</span></span></code></pre></div><h2 id="分布式任务调度平台" tabindex="-1">分布式任务调度平台 <a class="header-anchor" href="#分布式任务调度平台" aria-label="Permalink to &quot;分布式任务调度平台&quot;">​</a></h2><ol><li>加入部门管理和权限控制功能</li><li>加入 HTTP 任务和 GRPC 任务支持（也就是调度一个任务，就是调用一个 HTTP 接口，或者调用一个GRPC 接口）</li><li>加入任务执行历史的功能（也就是记录任务的每一次执行情况）</li></ol>`,22),h=[t];function e(p,k,r,E,d,o){return a(),i("div",null,h)}const y=s(l,[["render",e]]);export{g as __pageData,y as default};
