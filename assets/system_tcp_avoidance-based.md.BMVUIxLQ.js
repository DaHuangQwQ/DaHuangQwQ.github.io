import{_ as e,c as t,a2 as o,o as s}from"./chunks/framework.BQmytedh.js";const b=JSON.parse('{"title":"TCP拥塞控制算法","description":"","frontmatter":{},"headers":[],"relativePath":"system/tcp/avoidance-based.md","filePath":"system/tcp/avoidance-based.md"}'),r={name:"system/tcp/avoidance-based.md"};function c(d,a,n,i,l,h){return s(),t("div",null,a[0]||(a[0]=[o('<h1 id="tcp拥塞控制算法" tabindex="-1">TCP拥塞控制算法 <a class="header-anchor" href="#tcp拥塞控制算法" aria-label="Permalink to &quot;TCP拥塞控制算法&quot;">​</a></h1><p>TCP Vegas采用的是一种基于规避（avoidance-based）的方法来应对拥塞：它尝试探测吞吐速率的变化，并在拥塞变得严重到导致丢包前，调整发送速率，进而避免丢包的发生。以及基于这个策略的 3 个变种实现和这一类算法最为出众的代表： Google 推出的 BBR 算法</p><h2 id="tcp-vegas" tabindex="-1">TCP Vegas <a class="header-anchor" href="#tcp-vegas" aria-label="Permalink to &quot;TCP Vegas&quot;">​</a></h2><h2 id="fast-tcp" tabindex="-1">FAST TCP <a class="header-anchor" href="#fast-tcp" aria-label="Permalink to &quot;FAST TCP&quot;">​</a></h2><h2 id="tcp-westwood" tabindex="-1">TCP Westwood <a class="header-anchor" href="#tcp-westwood" aria-label="Permalink to &quot;TCP Westwood&quot;">​</a></h2><h2 id="new-vegas" tabindex="-1">New Vegas <a class="header-anchor" href="#new-vegas" aria-label="Permalink to &quot;New Vegas&quot;">​</a></h2><h2 id="tcp-bbr" tabindex="-1">TCP BBR <a class="header-anchor" href="#tcp-bbr" aria-label="Permalink to &quot;TCP BBR&quot;">​</a></h2>',7)]))}const P=e(r,[["render",c]]);export{b as __pageData,P as default};
