import{_ as l,c as p,a2 as e,o as n}from"./chunks/framework.BQmytedh.js";const i="/assets/a23b232b-d645-44a6-888d-dcb8e71da80c.drOt24ON.png",t="/assets/5175338f-4c8c-4518-8199-7e54f8fd9b8b.BhE0CMJ9.png",o="/assets/a0371891-c395-4ee1-918a-4531b112db79.BAHlIR0k.png",c="/assets/9e3c1fdb-9adb-4672-8661-50574444a84c.D8IVQLcn.png",r="/assets/53293aa7-2fa6-4df8-954e-1befb2b7b250.BFFJnD_L.png",s="/assets/933e55b4-5bbf-4734-81c3-1a858daee921.BOvLJlPK.png",G=JSON.parse('{"title":"golang","description":"","frontmatter":{},"headers":[],"relativePath":"labnote/go/golang.md","filePath":"labnote/go/golang.md"}'),m={name:"labnote/go/golang.md"};function h(g,a,u,d,b,B){return n(),p("div",null,a[0]||(a[0]=[e('<h1 id="golang" tabindex="-1">golang <a class="header-anchor" href="#golang" aria-label="Permalink to &quot;golang&quot;">​</a></h1><h2 id="gmp" tabindex="-1">GMP <a class="header-anchor" href="#gmp" aria-label="Permalink to &quot;GMP&quot;">​</a></h2><h2 id="内存分配" tabindex="-1">内存分配 <a class="header-anchor" href="#内存分配" aria-label="Permalink to &quot;内存分配&quot;">​</a></h2><p>与 Linux 的 SLAB 进行对比，两者都是分层结构，而且都是局部缓存-全局缓存这种结构，和 Go 的 GMP 调度的局部队列-全局队列的思路也是一致的，用引入局部数据结构来降低全局竞争</p><p>Go 堆上分配有三个核心结构：</p><ul><li>mcache：这个是和 P 绑定的，看到这个你就知道它是和并发没有什么关系的，是 P 自己独占的；</li><li>mcentral：是所有的 P 共享的。</li><li>mheap：也是所有的 P 共享的，但是一般我们会说它管理的是内存大块是 Areana（注意 Go 的堆外内存实验特性也叫做 Arena）。它和 mcentral 的区别在两方面：它是和操作系统打交道的，负责从操作系统里面申请内存；它还要和垃圾回收打交道，或者说垃圾回收是通过 mheap 来进行的。</li></ul><p>一看这种三级结构，你就应该大概猜到分配内存的过程：</p><ul><li>优先从 mcache 分配一块空闲内存给应用；</li><li>如果 mcache 没有空闲内存了，那么从 mcentral 里面拿一块大内存，而后分配一块小的给应用；</li><li>如果 mcentral 也没有空闲内存了，那么就从 mheap 拿一块内存，再分配给 mcache，最终 mcache 分配给应用；</li></ul><p>那么在这里有一个要注意的点，就是内存管理不是说随便管的，mcache、mcentral 和 mheap 都是按照 span 来管的，也叫做 mspan。那么这个 mspan 是什么东西呢？</p><p>mspan 是一块连续内存，一般由多个页组成，例如说 8KB（2页）一个 mspan。mspan 内部被进一步分配成了固定大小的对象，比如说 64B 一个对象。</p><p>那么不同对象大小的 mspan 就相当于有一些是 200 张 50 块的一捆，或者 1000 张 10 块的一捆，又或者 100 张 100 块的一捆。因此大体上结构如下图：</p><p><img src="'+i+'" alt="img" loading="lazy"></p><p>上面不同颜色代表 span 里面对象大小是不同的。比如说你可以认为绿色代表的是 100 块的一捆一万块，蓝色的是 50 块的一捆一万块。</p><p>当然，你稍微一想也能知道，最好的管理 span 的方式，就是按照对象大小把这些 span 串联在一起。相当于，50 一捆的放一个库房，100 一捆的放一个库房，这样好管理，好分配。</p><p>因此，实际上 mcache 里面的 span 组织方式是这样的：</p><p><img src="'+t+'" alt="img" loading="lazy"></p><p>而 mcentral 有点特殊，因为它放着很多 span，所以它把 span 分成了满（full）和不满（partial）两个部分。对应的结构是：</p><p><img src="'+o+'" alt="img" loading="lazy"></p><blockquote><p>有些人也叫做 empty 和 not empty</p></blockquote><p>所以当 mcache 从 mcentral 里面去拿 span 的时候，就是从 partial 里面拿一个。</p><p>而 Go 会使用位图（bitmap）来标记每个 span 内部的对象有没有被使用过。如下图是一个简单的实例：</p><p><img src="'+c+'" alt="img" loading="lazy"></p><p>因此，假设说现在我们需要一个 24B 大小的内存，或者说我们的一个 struct 要占据 24B，那么：</p><ul><li>mcache 看看自己的 32B 对象大小的 span 链表里面能不能找到一个空闲的对象，如果能，则直接返回；</li><li>mcache 发现自己没有，就去找 mcentral 要一个放 32B 对象的 span，mcache 拿到之后，就给我们一个空闲对象；</li><li>如果 mcentral 也没有，就去找 mheap 要一个放 32B 对象的 span；</li><li>如果 mheap 也没有，就会去找操作系统要一个 arena，然后切割成 span，将其中的一个给 mcentral；</li></ul><p>那么最后还有一个问题，你从上面这个流程里面就能发现，如果我对象只有 4B，难道也是给我一个 32B 的对象吗？那不就是浪费了 28B？而且，绝对部分对象都是小对象，都是很小的对象。比如说只有一两个，两三个字段的结构体，32B 都用不完。岂不是浪费很多？</p><p>所以 Go 在 mcache 里面搞了一个小东西，叫做极小对象（tiny object）分配，极小对象也是分配在堆上的，只是它针对的是小于 16B 的非指针对象（指针对象还是走上面的 mcache-mcentral-mheap 的路径）。</p><p>最后总结：</p><ul><li>极小对象：小于 16B 的 no scan（没有指针）对象，专门走 tiny object 的逻辑，直接分配到堆上；</li><li>小对象：16B ~ 32KB 的指针对象，小于 16B 的 scan （有指针）对象，走 mcache-mcentral-mheap 这条路；</li><li>大对象：大于 32KB 的对象，直接在 mheap 上分配；</li></ul><blockquote><p>极小对象，专门分配；小对象，走三关；大对象，mheap；</p></blockquote><p>极小对象的分配</p><ul><li>如果这个对象没有发生逃逸，那么就是栈上分配；</li><li>如果这个对象逃逸了，但是它是 no scan（没有指针） 对象，那么就会使用极小对象分配器，直接分配到特定的极小对象内存区域；</li><li>如果这个对象逃逸了，但是它不是 no scan（没有指针） 对象，那么就如同普通对象一样，经过 mcache-mcentral-mheap 这个机制分配；</li></ul><h3 id="流程" tabindex="-1">流程 <a class="header-anchor" href="#流程" aria-label="Permalink to &quot;流程&quot;">​</a></h3><p>Go 的内存分配分成了栈上分配和堆上分配两种。</p><p>栈上分配也就是分配到 goroutine 的栈上，这个过程是通过编译器在编译期间计算好如何分配的。</p><p>但是如果在编译期间，编译器发现没有办法分配到栈上，那么就会分配到堆上，这也就是所谓的内存逃逸。这个时候，运行时要根据对象大小来判定执行哪一种分配：</p><ul><li>如果是极小对象，也就是小于 16B 的非指针对象，那么就会直接利用极小对象分配器，分配到堆上</li><li>如果是大对象，也就是大于 32KB 的对象，那么就会直接分配到 mheap 上</li><li>否则，就按照 mcache、 mcentral 和 mheap 的三级结构，找到一个合适的 span 里面的空闲对象，分配给应用</li></ul><p>举个例子来说，假设说现在应用需要 24B 内存，那么它就会首先找 mcache，mcache 从自己的 32B 的 span 里面找一个空闲的对象，交给应用。</p><p>如果 mcache 没有，那么就找 mcentral 里面要一个 span。mcentral 会从自己的 pratial（不满的） 的 span 里面找出一个给 mcache，mcache 再找出一个空闲对象给应用。</p><p>如果 mcentral 也没有合适的 span，它就会找 mheap 要一个 span。</p><p>如果 mheap 也没有合适的 span，它就会找操作系统要一块 arena，自己切割成 span，交给 mcentral 一块span，而后 mcentral 再给 mcache，mcache 再找空闲对象给应用。</p><h2 id="垃圾回收" tabindex="-1">垃圾回收 <a class="header-anchor" href="#垃圾回收" aria-label="Permalink to &quot;垃圾回收&quot;">​</a></h2><p>一句话就可以说清楚 Go 使用的垃圾回收算法：并发-标记-清扫（Concurrent-Mark-Sweep）算法，很类似于 JAVA 的 CMS 算法。</p><p>整个垃圾税收可以看成是四步：</p><ul><li>初始标记阶段：这一个阶段是 STW（Stop the world）的，这个阶段也叫做根对象扫描阶段。顾名思义，它主要是扫描 GC Root，也就是全局变量、栈变量和寄存器；</li><li>并发标记阶段：这一个阶段回收器会从 GC Root 出发，遍历所有的对象，这些对象就被认为是存活对象。注意这一个阶段应用程序还是在运行的。你可以认为 GC 的 goroutine 和你业务的 goroutine 都在运行；</li><li>再标记阶段：也是 STW，这一阶段会重新扫描并发标记阶段新生成的对象，或者修改过的对象；</li><li>清扫阶段：也就是找出所有没有被标记为存活的对象，收回这部分空间。这一步有点难理解，最直观的理解就是遍历所有的 span，以及遍历每一个 span 内部的对象。如果一个对象是存活的，那么在标记阶段这些对象就被设置为存活的，没有这个标记的就是可以回收的了。</li></ul><p>清扫阶段和标记阶段是从不同角度的来进行遍历的。下面是一个帮助你理解的示意图：</p><p><img src="'+r+'" alt="img" loading="lazy"></p><p>根据这个图你还能看到想到一个点，就是如果一个 span 所有的对象都被回收了，那么这个 span 也可以被回收了，它首先会被异步地归还给 mcentral，而后再异步地归还给 mheap。</p><p>那么这里有一些注意点：</p><ul><li>Go 的标记算法用的是三色标记法，并且加上了弱三色不变性的保证；</li><li>Go 的内存是没有分代的，也就是说没有 JAVA 那边的年轻代，老年代的说法；</li><li>Go 的垃圾回收没暴露太多的调优参数，所以你想调优都调不了；</li></ul><h3 id="gc-root" tabindex="-1">GC root <a class="header-anchor" href="#gc-root" aria-label="Permalink to &quot;GC root&quot;">​</a></h3><p>Go 里面的 GC Root 主要包含三个部分：</p><ul><li>栈上对象：指的是 goroutine 栈上的对象；</li><li>全局变量：在 Go 里面一般就是指各种包变量；</li><li>寄存器</li></ul><p>在 Go 扫描的过程中，如果当前扫描的是一个指针，就需要沿着指针指向的地址继续扫描，但有些情况无法判定寄存器里面存的是一个值，亦或是一个指针，一律先当指针</p><h3 id="三色标记法" tabindex="-1">三色标记法 <a class="header-anchor" href="#三色标记法" aria-label="Permalink to &quot;三色标记法&quot;">​</a></h3><p>开始是白色，处理中是灰色，处理后是黑色</p><p><img src="'+s+'" alt="img" loading="lazy"></p><p>对象的引用随时可能发生变化，比如说新建了对象等，又或者删除了引用等</p><p><strong>强弱三色不变性</strong>就是为了解决并发标记而引入的两个假设：</p><ul><li>强三色不变性： <ul><li>灰色对象只能引用灰色或黑色对象</li><li>白色对象只能通过黑色对象引用</li></ul></li><li>弱三色不变性：在处理灰色对象时，可以临时允许它引用白色对象，但在它变为黑色之前，所有引用的白色对象都必须被标记为灰色</li></ul><p>Go 本身使用的是弱三色不变性，而不是强三色不变性。弱三色标记性描述的就是三色标记法的步骤3 到步骤 4 之间的这种临时情况。</p><p>那么 Go 在并发标记阶段究竟是怎么保证弱三色不变性？利用的是混合写屏障。可以看作是 AOP</p>',61)]))}const _=l(m,[["render",h]]);export{G as __pageData,_ as default};
