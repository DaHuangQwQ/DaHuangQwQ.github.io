import{_ as l,c as o,o as e,V as p}from"./chunks/framework.WykxUCM3.js";const h=JSON.parse('{"title":"服务注册与发现","description":"","frontmatter":{},"headers":[],"relativePath":"labnote/go/服务注册与发现.md","filePath":"labnote/go/服务注册与发现.md"}'),t={name:"labnote/go/服务注册与发现.md"},a=p('<h1 id="服务注册与发现" tabindex="-1">服务注册与发现 <a class="header-anchor" href="#服务注册与发现" aria-label="Permalink to &quot;服务注册与发现&quot;">​</a></h1><h2 id="形态" tabindex="-1">形态 <a class="header-anchor" href="#形态" aria-label="Permalink to &quot;形态&quot;">​</a></h2><ol><li><p>IP 直连</p></li><li><p>域名 + DNS</p></li><li><p>注册中心</p><blockquote><p>注册中心容易成为大集群的瓶颈</p></blockquote></li><li><p>借助网关的注册与发现</p></li></ol><h2 id="内容" tabindex="-1">内容 <a class="header-anchor" href="#内容" aria-label="Permalink to &quot;内容&quot;">​</a></h2><ol><li><p>服务自省</p><blockquote><p>阿里 Dubbo 提出的概念跟服务有关的元数据，通过一个元数据服务来暴露</p></blockquote></li><li><p>推拉模式</p></li><li><p>服务端和注册中心保持心跳</p><blockquote><p>服务端主动还是注册中心主动发起心跳</p><p>高级用法但不常用：</p><p>双向心跳</p><p>单向心跳失败之后，另外一边主动发起心跳</p></blockquote></li><li><p>服务优雅下线</p><blockquote><p>首先要通知注册中心，然后服务端节点不再接受新请求 服务端需要等待正在处理的请求结束 等服务端已经接收的请求处理完毕，服务端就会结束运行，或者超过超时时间，就会直接退出</p></blockquote></li><li><p>注册中心高可用</p><ul><li><p>部署一个集群多活方案（定时演练）</p></li><li><p>双注册中心方案</p></li><li><p>按业务拆分多个注册中心</p></li><li><p>业务拆分多个注册中心同时备份其他业务的注册中心（23混用）</p></li></ul></li><li><p>分布式 CAP 理论</p><blockquote><p>一个分布式系统不可能同时满足 一致性 可用性 分区容错性</p></blockquote></li><li><p>选择 CP 还是 AP？</p><blockquote><p>放弃 A 和 B 之间同步数据，就意味着放弃了一致性</p><p>放弃 A 和 B 对外服务， 就意味着放弃了 可用性</p><p>一般选择可用性，AP + 客户端容错</p></blockquote></li></ol>',5),i=[a];function c(r,_,n,s,u,b){return e(),o("div",null,i)}const q=l(t,[["render",c]]);export{h as __pageData,q as default};
