import{_ as t,c as e,a2 as n,o as r}from"./chunks/framework.BQmytedh.js";const c=JSON.parse('{"title":"安全验证","description":"","frontmatter":{},"headers":[],"relativePath":"labnote/go/auth.md","filePath":"labnote/go/auth.md"}'),a={name:"labnote/go/auth.md"};function s(l,o,i,h,u,g){return r(),e("div",null,o[0]||(o[0]=[n('<h1 id="安全验证" tabindex="-1">安全验证 <a class="header-anchor" href="#安全验证" aria-label="Permalink to &quot;安全验证&quot;">​</a></h1><h2 id="jwt" tabindex="-1">JWT <a class="header-anchor" href="#jwt" aria-label="Permalink to &quot;JWT&quot;">​</a></h2><p>Json web token（JWT）是为了网络应用环境间传递声明而执行的一种基于JSON的开发标准，该token被设计为紧凑且安全的，特别适用于分布式站点的单点登陆（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密</p><p><strong>使用场景</strong></p><p>**授权：**这是最常见的使用场景，解决单点登录问题。因为JWT使用起来轻便，开销小，服务端不用记录用户状态信息（无状态），所以使用比较广泛</p><p>**信息交换：**JWT是在各个服务之间安全传输信息的好方法。因为JWT可以签名，例如，使用公钥/私钥对儿 - 可以确定请求方是合法的。此外，由于使用标头和有效负载计算签名，还可以验证内容是否未被篡改</p><h3 id="jwt的原理和流程" tabindex="-1">JWT的原理和流程 <a class="header-anchor" href="#jwt的原理和流程" aria-label="Permalink to &quot;JWT的原理和流程&quot;">​</a></h3><p><strong>跨域认证的问题</strong></p><p>session 模式的问题在于，扩展性不好。单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session</p><p>举例来说，A 网站和 B 网站是同一家公司的关联服务。现在要求，用户只要在其中一个网站登录，再访问另一个网站就会自动登录，请问怎么实现？</p><p>一种解决方案是 session 数据持久化，写入数据库。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。JWT 就是这种方案的一个代表</p><h3 id="jwt-的原理" tabindex="-1">JWT 的原理 <a class="header-anchor" href="#jwt-的原理" aria-label="Permalink to &quot;JWT 的原理&quot;">​</a></h3><p>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。 { &quot;姓名&quot;: &quot;张三&quot;, &quot;角色&quot;: &quot;管理员&quot;, &quot;到期时间&quot;: &quot;2018年7月1日0点0分&quot; } 以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名</p><p><strong>服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展</strong></p><h2 id="jwt长短token的原理" tabindex="-1">JWT长短Token的原理 <a class="header-anchor" href="#jwt长短token的原理" aria-label="Permalink to &quot;JWT长短Token的原理&quot;">​</a></h2><p>JWT（JSON Web Token）是一种无状态、基于令牌的身份验证机制，通常用于用户认证和授权。在JWT的长短Token机制中，通常会生成两种Token：<strong>Access Token</strong> 和 <strong>Refresh Token</strong>。</p><ol><li><strong>Access Token（短Token）</strong></li></ol><ul><li><strong>特点</strong>：过期时间较短，通常为几分钟到几小时</li><li><strong>用途</strong>：用于常规业务请求的身份验证。客户端在每次请求时携带Access Token，服务器通过解析Token验证用户身份</li><li><strong>原理</strong>：Access Token是无状态的，包含用户的身份信息和权限信息，通过签名算法确保其不可篡改</li></ul><ol start="2"><li><strong>Refresh Token（长Token）</strong></li></ol><ul><li><strong>特点</strong>：过期时间较长，通常为几天到几周</li><li><strong>用途</strong>：用于在Access Token过期时，获取新的Access Token（和可能的新的Refresh Token），从而延长用户的登录状态</li><li><strong>原理</strong>：Refresh Token通常需要更高的安全性，可能结合有状态验证（如存储在服务器端的Token缓存）来防止滥用</li></ul><h3 id="为什么使用长短token" tabindex="-1">为什么使用长短Token <a class="header-anchor" href="#为什么使用长短token" aria-label="Permalink to &quot;为什么使用长短Token&quot;">​</a></h3><ol><li><strong>安全性</strong><ul><li><strong>短Token</strong>：由于过期时间短，即使被窃取，攻击者可利用的时间窗口有限</li><li><strong>长Token</strong>：虽然过期时间长，但通常会结合额外的安全机制（如服务器端验证）来防止滥用</li></ul></li><li><strong>用户体验</strong><ul><li>使用长短Token机制可以减少用户频繁重新登录的频率。Access Token过期时，客户端可以通过Refresh Token自动续签，无需用户手动登录</li></ul></li><li><strong>性能优化</strong><ul><li>短Token的频繁过期和续签机制可以减少Token泄露的风险，同时通过批量生成短Token等方式进一步优化性能</li></ul></li><li><strong>灵活性</strong><ul><li>长短Token机制可以灵活应对不同的安全需求和业务场景，例如在高安全需求的业务中，可以缩短Access Token的有效期</li></ul></li></ol><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>长短Token机制结合了JWT的无状态性和安全性，通过短Token实现快速验证，通过长Token实现灵活的续签机制，既提升了用户体验，又增强了系统的安全性</p><h2 id="oauth2-0" tabindex="-1">Oauth2.0 <a class="header-anchor" href="#oauth2-0" aria-label="Permalink to &quot;Oauth2.0&quot;">​</a></h2><h3 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h3><p>OAuth 2.0，全名为“开放授权2.0”（Open Authorization 2.0），是一种开放标准的授权协议，用于授权一个应用程序或服务访问用户在另一个应用程序中的资源，而无需提供用户名和密码。这使得用户可以安全地分享他们的数据资源，同时保持对其数据的控制。OAuth 2.0在现代互联网应用中被广泛使用，例如，你可以使用你的Google账号登录到其他网站，这就是OAuth的一种应用</p><h3 id="三个主要角色" tabindex="-1">三个主要角色 <a class="header-anchor" href="#三个主要角色" aria-label="Permalink to &quot;三个主要角色&quot;">​</a></h3><p>OAuth 2.0协议中有三个主要角色：</p><ul><li><strong>资源所有者（Resource Owner）</strong>：资源所有者是数据的拥有者，他们可以授权其他应用程序来访问他们的资源。例如，你是你社交媒体账号的资源所有者</li><li><strong>客户端（Client）</strong>：客户端是请求访问资源的应用程序。它可以是Web应用、移动应用、桌面应用，甚至是其他服务。例如，一个社交媒体管理应用可以充当客户端</li><li><strong>授权服务器（Authorization Server）</strong>：授权服务器是资源所有者的服务提供者，负责验证资源所有者的身份并向客户端颁发访问令牌。这通常是第三方身份验证提供商，如Google或Facebook</li></ul><h3 id="两个核心概念" tabindex="-1">两个核心概念 <a class="header-anchor" href="#两个核心概念" aria-label="Permalink to &quot;两个核心概念&quot;">​</a></h3><ul><li><strong>访问令牌（Access Token）</strong>：访问令牌是客户端用来访问资源服务器上受保护资源的凭证。它是客户端向授权服务器请求的，通常具有一定的时效性。客户端使用访问令牌来证明它已被授权访问资源</li><li><strong>授权代码（Authorization Code）</strong>：授权代码是客户端向授权服务器请求访问令牌的中间凭证。它用于在客户端和授权服务器之间进行安全的令牌交换</li></ul><h3 id="工作流程" tabindex="-1">工作流程 <a class="header-anchor" href="#工作流程" aria-label="Permalink to &quot;工作流程&quot;">​</a></h3><p><strong>1. 注册应用</strong></p><p>客户端必须在授权服务器上注册，并获得一个客户端标识（Client ID）和客户端密码（Client Secret）。这是为了验证客户端的身份，并确保安全性</p><p><strong>2. 重定向用户</strong></p><p>客户端将用户重定向到授权服务器，以请求授权。用户将在授权服务器上登录并授权客户端访问他们的资源</p><p><strong>3. 授权授予</strong></p><p>一旦用户同意授权，授权服务器将生成一个授权代码，并将其发送回客户端。客户端使用授权代码向授权服务器请求访问令牌</p><p><strong>4. 获取访问令牌</strong></p><p>客户端使用授权代码来请求访问令牌。授权服务器验证授权代码，如果有效，颁发访问令牌</p><p><strong>5. 访问资源</strong></p><p>客户端使用访问令牌来请求资源服务器上的受保护资源。资源服务器验证令牌，如果有效，提供资源</p><h3 id="优缺点" tabindex="-1">优缺点 <a class="header-anchor" href="#优缺点" aria-label="Permalink to &quot;优缺点&quot;">​</a></h3><p><strong>1. 优点</strong></p><ul><li><strong>安全性</strong>：OAuth 2.0通过访问令牌提供了额外的安全性，因此客户端不需要存储用户的用户名和密码</li><li><strong>用户友好</strong>：OAuth 2.0使用户能够选择哪些资源可以被访问，而不必共享他们的密码</li><li><strong>广泛支持</strong>：OAuth 2.0已经成为一种广泛支持的标准，几乎所有主要的互联网公司都支持OAuth 2.0</li></ul><p><strong>2. 缺点</strong></p><ul><li><strong>复杂性</strong>：OAuth 2.0的实现相对复杂，对于初学者来说可能有一定的学习曲线</li><li><strong>安全性依赖于正确的实现</strong>：虽然OAuth 2.0提供了一些安全性，但它仍然依赖于正确的实现，如果不小心实施，可能会有漏洞</li></ul><h3 id="oauth-2-0的应用场景" tabindex="-1">OAuth 2.0的应用场景 <a class="header-anchor" href="#oauth-2-0的应用场景" aria-label="Permalink to &quot;OAuth 2.0的应用场景&quot;">​</a></h3><p>OAuth 2.0广泛应用于各种场景，以下是一些常见的应用场景：</p><ul><li><strong>社交登录</strong>：用户可以使用他们的社交媒体帐户登录到其他应用程序，例如使用Google或Facebook登录</li><li><strong>API访问</strong>：开发人员可以使用OAuth 2.0来访问第三方API，例如使用GitHub API或Twitter API</li><li><strong>单点登录</strong>：用户可以使用一个身份验证提供商登录到多个相关的应用程序，而无需多次输入凭证</li><li><strong>授权访问</strong>：应用程序可以请求用户授权访问其资源，例如Google云存储或Dropbox</li><li><strong>移动应用授权</strong>：移动应用程序可以安全地请求访问用户数据，如照片、联系人或位置信息</li></ul>',51)]))}const k=t(a,[["render",s]]);export{c as __pageData,k as default};
