import{_ as e,c as o,o as t,V as l}from"./chunks/framework.jgiY9GFO.js";const b=JSON.parse('{"title":"负载均衡","description":"","frontmatter":{},"headers":[],"relativePath":"labnote/go/负载均衡.md","filePath":"labnote/go/负载均衡.md"}'),a={name:"labnote/go/负载均衡.md"},i=l('<h1 id="负载均衡" tabindex="-1">负载均衡 <a class="header-anchor" href="#负载均衡" aria-label="Permalink to &quot;负载均衡&quot;">​</a></h1><h2 id="种类" tabindex="-1">种类 <a class="header-anchor" href="#种类" aria-label="Permalink to &quot;种类&quot;">​</a></h2><ol><li><p>轮询、随机</p><blockquote><p>有俩个假设 所有服务器的处理能力是一样的，所有请求所需的资源也是一样的</p></blockquote></li><li><p>加权轮询、加权随机</p><blockquote><p>权重通过注册中心传递</p></blockquote></li><li><p>哈希、加权哈希、一致性哈希</p></li><li><p>动态负载均衡算法（99%不会用）</p><ul><li>最小连接数 连接多路复用 连接数不准</li><li>最小活跃数 正在处理的请求 请求大小不一样 不太好用</li><li>最快响应时间算法 平均响应时间 99线 999线</li></ul><blockquote><p>微服务框架不具备全局信息</p></blockquote></li><li><p>设计自己的负载均衡算法</p><blockquote><p>信心通过服务端响应头携带自己的元数据指标、利用可观测平台，最高端的做法是前俩个和在一起使用</p></blockquote></li></ol>',3),c=[i];function _(p,r,n,s,d,u){return t(),o("div",null,c)}const k=e(a,[["render",_]]);export{b as __pageData,k as default};
