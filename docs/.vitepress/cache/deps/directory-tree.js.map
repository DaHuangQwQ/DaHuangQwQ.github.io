{
  "version": 3,
  "sources": ["browser-external:fs", "browser-external:path", "../../../../node_modules/directory-tree/lib/directory-tree.js"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"fs\" has been externalized for browser compatibility. Cannot access \"fs.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"path\" has been externalized for browser compatibility. Cannot access \"path.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "'use strict';\n\nconst FS = require('fs');\nconst PATH = require('path');\nconst constants = {\n  DIRECTORY: 'directory',\n  FILE: 'file'\n}\n\nfunction safeReadDirSync (path) {\n  let dirData = {};\n  try {\n    dirData = FS.readdirSync(path);\n  } catch(ex) {\n    if (ex.code == \"EACCES\" || ex.code == \"EPERM\") {\n      //User does not have permissions, ignore directory\n      return null;\n    }\n    else throw ex;\n  }\n  return dirData;\n}\n\n/**\n * Normalizes windows style paths by replacing double backslahes with single forward slahes (unix style).\n * @param  {string} path\n * @return {string}\n */\nfunction normalizePath(path) {\n  return path.replace(/\\\\/g, '/');\n}\n\n/**\n * Tests if the supplied parameter is of type RegExp\n * @param  {any}  regExp\n * @return {Boolean}\n */\nfunction isRegExp(regExp) {\n  return typeof regExp === \"object\" && regExp.constructor == RegExp;\n}\n\n/**\n * Collects the files and folders for a directory path into an Object, subject\n * to the options supplied, and invoking optional\n * @param  {String} path\n * @param  {Object} options\n * @param  {function} onEachFile\n * @param  {function} onEachDirectory\n * @return {Object}\n */\nfunction directoryTree (path, options, onEachFile, onEachDirectory, currentDepth = 0) {\n  options = options || {};\n\n  if (options.depth !== undefined && options.attributes && options.attributes.indexOf('size') !== -1) {\n    throw new Error('usage of size attribute with depth option is prohibited');\n  }\n\n  const name = PATH.basename(path);\n  path = options.normalizePath ? normalizePath(path) : path;\n  const item = { path, name };\n  let stats;\n  let lstat;\n\n  try {\n    stats = FS.statSync(path);\n    lstat = FS.lstatSync(path);\n  }\n  catch (e) { return null }\n\n  // Skip if it matches the exclude regex\n  if (options.exclude) {\n    const excludes =  isRegExp(options.exclude) ? [options.exclude] : options.exclude;\n    if (excludes.some((exclusion) => exclusion.test(path))) {\n      return null;\n    }\n  }\n\n  if (lstat.isSymbolicLink()) {\n    item.isSymbolicLink = true;\n    // Skip if symbolic links should not be followed\n    if (options.followSymlinks === false)\n      return null;\n    // Initialize the symbolic links array to avoid infinite loops\n    if (!options.symlinks)\n      options = { ...options, symlinks: [] };\n    // Skip if a cyclic symbolic link has been found\n    if (options.symlinks.find(ino => ino === lstat.ino)) {\n      return null;\n    } else {\n      options.symlinks.push(lstat.ino);\n    }\n  }\n\n  if (stats.isFile()) {\n\n    const ext = PATH.extname(path).toLowerCase();\n\n    // Skip if it does not match the extension regex\n    if (options.extensions && !options.extensions.test(ext))\n      return null;\n\n\n    if (options.attributes) {\n      options.attributes.forEach((attribute) => {\n        switch (attribute) {\n          case 'extension':\n            item.extension = ext;\n            break;\n          case 'type':\n            item.type = constants.FILE;\n            break;\n          default:\n            item[attribute] = stats[attribute];\n            break;\n        }\n      });\n    }\n\n    if (onEachFile) {\n      onEachFile(item, path, stats);\n    }\n  }\n  else if (stats.isDirectory()) {\n    let dirData = safeReadDirSync(path);\n    if (dirData === null) return null;\n\n    if (options.depth === undefined || options.depth > currentDepth) {\n      item.children = dirData\n          .map(child => directoryTree(PATH.join(path, child), options, onEachFile, onEachDirectory, currentDepth + 1))\n          .filter(e => !!e);\n    }\n\n    if (options.attributes) {\n      options.attributes.forEach((attribute) => {\n        switch (attribute) {\n          case 'size':\n            item.size = item.children.reduce((prev, cur) => prev + cur.size, 0);\n            break;\n          case 'type':\n            item.type = constants.DIRECTORY;\n            break;\n          case 'extension':\n            break;\n          default:\n            item[attribute] = stats[attribute];\n            break;\n        }\n        \n      });\n    }\n\n    if (onEachDirectory) {\n      onEachDirectory(item, path, stats);\n    }\n  } else {\n    return null; // Or set item.size = 0 for devices, FIFO and sockets ?\n  }\n  return item;\n}\n\nmodule.exports = directoryTree;\n"],
  "mappings": "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",
  "names": []
}
